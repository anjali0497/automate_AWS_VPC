// Archive data of Lambda Function
data "archive_file" "lambda" {
  type = "zip"
  source_file = var.lambda_source_code_path
  output_path = var.output_path
}


//FOR CREATING A LAMBDA 
resource "aws_lambda_function" "api-lambda" {
  function_name = var.lambda_function_name
  handler       = "index.handler"
  role          = aws_iam_role.iam-role-for-lambda.arn
  runtime       = "nodejs14.x"
  source_code_hash = filebase64(var.lambda_source_code_path)  # Specify the path to your zip file



  filename = data.archive_file.lambda.output_path
  vpc_config {
    subnet_ids         = [aws_subnet.private-subnet.id]
    security_group_ids = [aws_security_group.vpc-sg.id]
  }
}

// create aws lambda function event invoke config with destination

resource "aws_lambda_function_event_invoke_config" "lambda-destination" {
  function_name = aws_lambda_function.api-lambda.function_name
  maximum_event_age_in_seconds = 300
  maximum_retry_attempts = 0
  
  destination_config {
    on_failure {
      destination = aws_sns_topic.lambda-test-sns.arn
    }

    on_success {
      destination = aws_sns_topic.lambda-test-sns.arn
    }
  }
}

// Attach policies for CloudWatch 
resource "aws_iam_role_policy_attachment" "lambda_cloudwatch_policy" {
  policy_arn = "arn:aws:iam::aws:policy/CloudWatchFullAccess"
  role       = aws_iam_role.iam-role-for-lambda.name
}

//create lambda permission to api for trriger

resource "aws_lambda_permission" "apigw_lambda_permission" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.api-lambda.arn
  principal     = "apigateway.amazonaws.com"
  source_arn    = "arn:aws:execute-api:${var.region}:${var.account_id}:${aws_api_gateway_deployment.gateway-deployment.id}/${aws_api_gateway_rest_api.api-for-lambda.id}/*"
}


resource "aws_sns_topic" "lambda-test-sns" {
  name = "my-topic-with-policy"
}

resource "null_resource" "test_lambda_execution" {
  provisioner "local-exec" {
    command = <<EOT
      aws lambda invoke \
        --function-name ${aws_lambda_function.api-lambda.function_name} \
        --invocation-type Event \
        --payload '${jsonencode(var.api_gateway_test_event)}' >nul
    EOT
  }
}

output "lambda_function_name" {
  value = aws_lambda_function.api-lambda.function_name
}
