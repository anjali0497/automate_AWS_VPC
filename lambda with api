
// Create IAM Role
resource "aws_iam_role" "iam-role-for-lambda" {
  name = "lambda_role"
  assume_role_policy = data.aws_iam_policy_document.instance-assume-role-policy.json
}


//CREATE IAM POLICY
resource "aws_iam_policy" "lambda-policy" {
  name        = "lambda-policy"
  description = "Policy for Lambda function"
  policy =jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action   = "logs:CreateLogGroup",
        Effect   = "Allow",
        Resource = "arn:aws:logs:${var.region}:${var.account_id}:log-group:/aws/lambda/api-lambda-fuction/*"
      },
      {
        Action = [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        Effect   = "Allow",
         Resource =  ["arn:aws:logs:${var.region}:${var.account_id}:log-group:/aws/lambda/api-lambda-function:*:log-stream/*",
             "arn:aws:s3:::api-zip-demo",
             "arn:aws:s3:::api-zip-demo/*"
         ]      
      },
      {
        Action = "ec2:CreateNetworkInterface",
        Effect = "Allow",
        Resource = "*"
      },
       {
        Action = "ec2:DescribeNetworkInterfaces",
        Effect = "Allow",
        Resource = "*"
      },
        {
        Action = "ec2:DeleteNetworkInterface",
        Effect = "Allow",
        Resource = "*"
      },
      {
        Effect = "Allow",
        Action = "sns:Publish",
        Resource = "arn:aws:sns:${var.region}:${var.account_id}:terraform-lambda-sns"
      }
    ]
  })
}


// CREATE IAM POLICY ATTACHMENT WITH ROLE

resource "aws_iam_policy_attachment" "lambda-execution-policy" {
  name = "example-lambda-policy"
  policy_arn = aws_iam_policy.lambda-policy.arn
  roles = [aws_iam_role.iam-role-for-lambda.name]
}


//CREATE A IAM POLICY DOCUMENT FOR ASSUME ROLE

data "aws_iam_policy_document" "instance-assume-role-policy" {
  statement {
    actions = ["sts:AssumeRole"]
    effect = "Allow"
    principals {
      type = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

// CREATE A IAM POLICY DOCUMENT FOR CLOUD WATCH

data "aws_iam_policy_document" "lambda-policy-document" {
  statement {
    actions = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ]
    effect = "Allow"
    resources = [
      "arn:aws:logs:${var.region}:${var.account_id}:log-group:/aws/lambda/api-lambda-function/*",
      "arn:aws:logs:${var.region}:${var.account_id}:log-group:/aws/lambda/api-lambda-function:*:log-stream/*",
    ]
  }
}

// ARCHIVE FILE FROM LAMBDA FUNCTION

data "archive_file" "lambda" {
  type = "zip"
  source_file = var.zip_filepath
  output_path = var.output_path
}

//FOR CREATING A LAMBDA FUCTION WITH VPC CONFIG

resource "aws_lambda_function" "api-lambda" {
  function_name = var.lambda_function_name
  handler       = "index.handler"
  role          = aws_iam_role.iam-role-for-lambda.arn
  runtime       = "nodejs14.x"

  filename = data.archive_file.lambda.output_path
  vpc_config {
    subnet_ids         = [aws_subnet.private-subnet[0].id]
    security_group_ids = [aws_security_group.demo-vpc-sg.id]
  }
}


// CREATE LAMBDA FUNCTION EVENT INVOKE CONFIG

resource "aws_lambda_function_event_invoke_config" "lambda-destination" {
  function_name = aws_lambda_function.api-lambda.function_name
  maximum_event_age_in_seconds = 300
  maximum_retry_attempts = 0
  
  destination_config {
    on_failure {
      destination = aws_sns_topic.lambda-sns.arn
    }

    on_success {
      destination = aws_sns_topic.lambda-sns.arn
    }
  }
}
resource "aws_sns_topic" "lambda-sns" {
  name = "terraform-lambda-sns"
}


//create a API gateway for triggered lambda function
//CREATE A API GATEWAY

resource "aws_api_gateway_rest_api" "api-for-lambda" {
  name = "terraform-ag"
}

//CREATE API GATEWAY RESOURCE

resource "aws_api_gateway_resource" "gateway-resource" {
  parent_id   = aws_api_gateway_rest_api.api-for-lambda.root_resource_id
  path_part   = "terraform-agr"
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id
}

// CREATE API GATEWAY METHOD FOR API GATEWAY

resource "aws_api_gateway_method" "gateway-method" {
  authorization = "NONE"
  http_method   = "GET"
  resource_id   = aws_api_gateway_resource.gateway-resource.id
  rest_api_id   = aws_api_gateway_rest_api.api-for-lambda.id
}

//CREATE API GATEWAY INTEGRATION BETWEEN METHOD AND LAMBDA FUNCTION

resource "aws_api_gateway_integration" "gateway-integration" {
  http_method = aws_api_gateway_method.gateway-method.http_method
  resource_id = aws_api_gateway_resource.gateway-resource.id
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id
  
  type                    = "AWS_PROXY"
  integration_http_method = "POST"
  uri                     = aws_lambda_function.api-lambda.invoke_arn
}

//CREATE A API GATEWAY DEPLOYMENT

resource "aws_api_gateway_deployment" "gateway-deployment" {
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id

  triggers = {
    redeployment = sha1(jsonencode([
      aws_api_gateway_resource.gateway-resource.id,
      aws_api_gateway_method.gateway-method.id,
      aws_api_gateway_integration.gateway-integration.id 
    ]))

  }
  lifecycle {
    create_before_destroy = true
  }
  stage_name = "terraform-ag-deployment"
}

// CREATE API GATEWAY STAGE

resource "aws_api_gateway_stage" "gateway-stage" {
  deployment_id = aws_api_gateway_deployment.gateway-deployment.id
  rest_api_id   = aws_api_gateway_rest_api.api-for-lambda.id
  stage_name    = "terraform-ag-stage"
}

// CREATE LAMBDA PERMISSION TO API FOR TIGGER

resource "aws_lambda_permission" "apigw_lambda_permission" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.api-lambda.arn
  principal     = "apigateway.amazonaws.com"
  source_arn    = "arn:aws:execute-api:${var.region}:${var.account_id}:${aws_api_gateway_deployment.gateway-deployment.id}/${aws_api_gateway_rest_api.api-for-lambda.id}/*"
}
