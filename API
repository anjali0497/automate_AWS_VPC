#create a API gateway for triggered lambda function

//create api gateway
resource "aws_api_gateway_rest_api" "api-for-lambda" {
  name = "terraform-ag"
}

//create api gateway resource//create api gateway
resource "aws_api_gateway_rest_api" "api-for-lambda" {
  name        = "terraform-ag"
  description = "API created from OpenAPI specification"
  body        = file("C:/Users/ANJALI/Downloads/squareNumberApi.yaml")
  depends_on = [ aws_lambda_function.api-lambda ]
}

//create api gateway resource
resource "aws_api_gateway_resource" "gateway-resource" {
  parent_id   = aws_api_gateway_rest_api.api-for-lambda.root_resource_id
  path_part   = "terraform-agr"
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id
}

// create api gateway method
resource "aws_api_gateway_method" "gateway-method" {
  authorization = "NONE"
  http_method   = "POST"
  resource_id   = aws_api_gateway_resource.gateway-resource.id
  rest_api_id   = aws_api_gateway_rest_api.api-for-lambda.id
}

//create api gateway integration between method and lambda function
resource "aws_api_gateway_integration" "gateway-integration" {
  http_method = aws_api_gateway_method.gateway-method.http_method
  resource_id = aws_api_gateway_resource.gateway-resource.id
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id
  
  type = "AWS"
  integration_http_method = "POST"
  uri                     = aws_lambda_function.api-lambda.invoke_arn
}

//create api gateway deployment 

resource "aws_api_gateway_deployment" "gateway-deployment" {
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id

  depends_on = [
    aws_api_gateway_integration.gateway-integration
  ]

  triggers = {

    redeployment = sha1(jsonencode([
      aws_api_gateway_resource.gateway-resource.id,
      aws_api_gateway_method.gateway-method.id,
      aws_api_gateway_integration.gateway-integration.id
        
    ]))
  }

  lifecycle {
    create_before_destroy = true
  }
  stage_name = "terraform-ag-deployment"
}


resource "aws_api_gateway_stage" "gateway-stage" {
  deployment_id = aws_api_gateway_deployment.gateway-deployment.id
  rest_api_id   = aws_api_gateway_rest_api.api-for-lambda.id
  stage_name    = "terraform-ag-stage"
}


# Output API Gateway URL
output "api_gateway_url" {
  value = aws_api_gateway_deployment.gateway-deployment.invoke_url
}
resource "aws_api_gateway_resource" "gateway-resource" {
  parent_id   = aws_api_gateway_rest_api.api-for-lambda.root_resource_id
  path_part   = "terraform-agr"
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id
}

// create api gateway method
resource "aws_api_gateway_method" "gateway-method" {
  authorization = "NONE"
  http_method   = "POST"
  resource_id   = aws_api_gateway_resource.gateway-resource.id
  rest_api_id   = aws_api_gateway_rest_api.api-for-lambda.id
}

//create api gateway integration between method and lambda function
resource "aws_api_gateway_integration" "gateway-integration" {
  http_method = aws_api_gateway_method.gateway-method.http_method
  resource_id = aws_api_gateway_resource.gateway-resource.id
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id
  
  type = "AWS"
  integration_http_method = "POST"
  uri                     = aws_lambda_function.api-lambda.invoke_arn
}

//create api gateway deployment

resource "aws_api_gateway_deployment" "gateway-deployment" {
  rest_api_id = aws_api_gateway_rest_api.api-for-lambda.id

  depends_on = [
    aws_api_gateway_integration.gateway-integration
  ]

  triggers = {

    redeployment = sha1(jsonencode([
      aws_api_gateway_resource.gateway-resource.id,
      aws_api_gateway_method.gateway-method.id,
      aws_api_gateway_integration.gateway-integration.id
        
    ]))
  }

  lifecycle {
    create_before_destroy = true
  }
  stage_name = "terraform-ag-deployment"
}


resource "aws_api_gateway_stage" "gateway-stage" {
  deployment_id = aws_api_gateway_deployment.gateway-deployment.id
  rest_api_id   = aws_api_gateway_rest_api.api-for-lambda.id
  stage_name    = "terraform-ag-stage"
}


# Output API Gateway URL
output "api_gateway_url" {
  value = aws_api_gateway_deployment.gateway-deployment.invoke_url
}
